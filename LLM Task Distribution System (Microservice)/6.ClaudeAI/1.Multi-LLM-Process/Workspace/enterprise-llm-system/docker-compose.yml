services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_KEYCLOAK_DB}
      KC_DB_USERNAME: ${POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HEALTH_ENABLED: "true"
    ports:
      - "8180:8080"
    volumes:
      - ./configs/keycloak:/opt/keycloak/data/import
    command:
      - start-dev
      - --import-realm
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - security

  postgres:
    image: postgres:15-alpine
    environment:
      # Use a temporary initial database
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      # Environment variables for additional databases
      POSTGRES_ADDITIONAL_DBS: "${POSTGRES_KEYCLOAK_DB},${POSTGRES_DB}"
      POSTGRES_ADDITIONAL_USERS: "${POSTGRES_KEYCLOAK_USER},${POSTGRES_USER}"
      POSTGRES_ADDITIONAL_PASSWORDS: "${POSTGRES_KEYCLOAK_PASSWORD},${POSTGRES_PASSWORD}"
      # Fix locale issues
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-postgres-databases.sh:/docker-entrypoint-initdb.d/init-multiple-postgres-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_KEYCLOAK_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - security

  api-gateway:
    image: kong:latest
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
    ports:
      - "${API_GATEWAY_PORT}:8000"
      - "8001:8001"
      - "8443:8443"
    volumes:
      - ./configs/kong:/usr/local/kong/declarative
    networks:
      - security

  task-manager:
    build: 
      context: ./services/task-manager
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/llm_system
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080/auth
    ports:
      - "${TASK_MANAGER_PORT}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - security

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080/auth
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    ports:
      - "${AUTH_SERVICE_PORT}:8082"
    depends_on:
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - security

  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - security

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - security

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - security

networks:
  security:
    driver: bridge

volumes:
  postgres_data:
