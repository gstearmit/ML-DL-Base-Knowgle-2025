version: '3.8'

services:
  # 1. Client Access Layer
  nginx-cdn:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
    networks:
      - frontend-network

  # 2. Security Layer
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin123
    ports:
      - "8080:8080"
    networks:
      - security-network

  kong:
    image: kong:latest
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
    ports:
      - "8000:8000"
      - "8443:8443"
    networks:
      - security-network
    depends_on:
      - kong-database

  kong-database:
    image: postgres:13
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kongpass
    networks:
      - security-network

  # 3. Data Processing Layer
  nifi:
    image: apache/nifi:latest
    ports:
      - "8091:8080"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
    networks:
      - processing-network

  # 4. Task Management Layer
  postgresql:
    image: postgres:15
    environment:
      - POSTGRES_USER=taskuser
      - POSTGRES_PASSWORD=taskpass
      - POSTGRES_DB=taskdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - task-network

  redis-task:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - task-network

  # 5. Queue Management Layer
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - queue-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - queue-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - queue-network

  # 6. Resource Management Layer
  haproxy:
    image: haproxy:latest
    ports:
      - "8404:8404"
    volumes:
      - ./config/haproxy:/usr/local/etc/haproxy
    networks:
      - resource-network

  # 7. LLM Engine Processing Layer
  redis-result:
    image: redis:7
    ports:
      - "6380:6379"
    networks:
      - llm-network

  # 8. Result Processing Layer
  spark:
    image: apache/spark:latest
    environment:
      - SPARK_MODE=master
    ports:
      - "8090:8080"
      - "7077:7077"
    networks:
      - processing-network

  # 9. Monitoring Layer
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.x
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - monitoring-network

  # 10. Reliability Layer
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - storage-network

networks:
  frontend-network:
  security-network:
  processing-network:
  task-network:
  queue-network:
  resource-network:
  llm-network:
  monitoring-network:
  storage-network:

volumes:
  postgres_data:
  minio_data: 